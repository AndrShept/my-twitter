// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  comment       Comment[]
  like          Like[]
  following     Following[]

  @@map("users")
}

model Following {
  id                String   @id @default(uuid()) @map("_id") 
  followingId       String   
  followingName     String
  followingUserName String
  followingImage    String
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("followings")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  image          String
  content        String
  published      Boolean   @default(false)
  authorImage    String
  authorName     String
  authorUserName String
  authorId       String    @db.ObjectId
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  comments       Comment[] // Relationship with the Comment model
  like           Like[]

  @@map("posts")
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  postId      String    @db.ObjectId
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String    @db.ObjectId
  authorImage String // Поле для зберігання URL-адреси аватарки користувача
  authorName  String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("likes")
}
